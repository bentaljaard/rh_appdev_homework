// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def mvnCmd = "mvn -s ./nexus_settings.xml"


    // Checkout Source Code
    stage('Checkout Source') {
      checkout scm
    }

    dir('MLBParks'){

      // Extract version and other properties from the pom.xml
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${env.BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = version

      sh 'cp ../nexus_settings.xml .'
      sh "sed -i 's/GUID/'${GUID}'/g' ./nexus_settings.xml"

      stage('Build Code Artifacts') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean install -DskipTests=true"
      }

      
      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
      }
              
      // Using Maven call SonarQube for Code Analysis
      stage('Code Analysis') {
          echo "Running Code Analysis"
          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER} -Dsonar.projectVersion=${devTag}"      
      }
        
      
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image mlbparks:${devTag}"
        sh "oc start-build mlbparks --follow=true --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war -n ${GUID}-parks-dev"
        openshiftVerifyBuild bldCfg: 'mlbparks', checkForTriggeredDeployments: 'false', namespace: '${GUID}-parks-dev', verbose: 'false'
        openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
      }

      stage('Deploy to Dev') {
        echo "Deploying mlbparks image to Development Project"
        sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"
        openshiftDeploy depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', verbose: 'false'
        openshiftVerifyDeployment depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true'
        openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'mlbparks', verbose: 'false'

      }

      // Run Integration Tests in the Development Environment.
      stage('Integration Tests') {
        echo "Running Integration Tests"
        sleep 30
        // Create a new task called "integration_test_1"
        //echo "Creating task"
        //sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.bft-tasks-dev.svc.cluster.local:8080/ws/tasks/integration_test_1"
        
        // Retrieve task with id "1"
        //echo "Retrieving tasks"
        //sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X GET http://tasks.bft-tasks-dev.svc.cluster.local:8080/ws/tasks/1"
        
        // Delete task with id "1"
        //echo "Deleting tasks"
        //sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X DELETE http://tasks.bft-tasks-dev.svc.cluster.local:8080/ws/tasks/1"
      }

      // Copy Image to Nexus Docker Registry
      stage('Copy Image to Nexus Docker Registry') {
        echo "Copy image to Nexus Docker Registry"
        sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc.cluster.local:5000/mlbparks:${devTag}"

        // Tag the built image with the production tag.
        openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'
      }


    }



    

 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.

def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
