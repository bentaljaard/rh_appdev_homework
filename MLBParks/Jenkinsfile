// Jenkinsfile for MLBParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "172.30.1.1:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def mvnCmd = "mvn -s ./nexus_settings.xml"

    // Checkout Source Code
    stage('Checkout Source') {
      checkout scm
    }

    dir('MLBParks'){

      // Extract version and other properties from the pom.xml
      def groupId    = getGroupIdFromPom("pom.xml")
      def artifactId = getArtifactIdFromPom("pom.xml")
      def version    = getVersionFromPom("pom.xml")

      // Set the tag for the development image: version + build number
      def devTag  = "${version}-${env.BUILD_NUMBER}"
      // Set the tag for the production image: version
      def prodTag = version

      sh 'cp ../nexus_settings.xml .'
      sh "sed -i 's/GUID/'${GUID}'/g' ./nexus_settings.xml"

      stage('Build Code Artifacts') {
        echo "Building version ${version}"
        sh "${mvnCmd} clean install -DskipTests=true"
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
        echo "Running Unit Tests"
        sh "${mvnCmd} test"
      }
        
      // Using Maven call SonarQube for Code Analysis
      stage('Code Analysis') {
        echo "Running Code Analysis"
        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000 -Dsonar.projectVersion=${devTag}"

      }
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"
        sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
      }

      // Build the OpenShift Image in OpenShift and tag it.
//      stage('Build and Tag OpenShift Image') {
//        echo "Building OpenShift container image mlb-parks:${devTag}"
//        sh "oc start-build mlb-parks --follow=true --from-file=http://nexus3-${GUID}-nexus.${CLUSTER}/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war -n bft-tasks-dev"
//        openshiftVerifyBuild apiURL: '', authToken: '', bldCfg: 'tasks', checkForTriggeredDeployments: 'false', namespace: 'bft-tasks-dev', verbose: 'false', waitTime: ''
//        openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: 'bft-tasks-dev', namespace: 'bft-tasks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
//      }
    }



    

 
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.

def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
